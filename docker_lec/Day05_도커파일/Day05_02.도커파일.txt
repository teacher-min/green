도커 이미지 만들기

1. 도커 컨테이너 -> 도커 이미지 : docker commit (수업에서 사용 안 하는 방식)
2. Dockerfile 파일 작성
  1) 파일명이 정해져 있습니다. 확장자 없이 Dockerfile로 작성합니다.
    다른 이름을 사용하려면 docker build -f 옵션으로 사용한 이름을 지정해야 합니다.
  2) Dockerfile 파일 구성
    (1) FROM <이미지> : 베이스 이미지 지정. 모든 Dockerfile은 반드시 FROM으로 시작합니다.
    (2) ARG <인자> : docker image build --build-arg 옵션으로 인자 값을 전달할 수 있습니다.
    (3) ARG <인자=값> : 해당 인자값을 Dockerfile 내부에서 $인자, ${인자} 형식으로 사용할 수 있습니다.
    (4) LABEL maintainer="작성자 정보"
                 title="이미지제목"
                 version="버전" 
                 description="이미지개요"  :  이미지에 대한 각종 정보를 작성합니다.
    (5) RUN <명령어> : 이미지를 만들 때(image build) 실행할 리눅스 명령어를 작성합니다.
    (6) ENV <환경변수> <값> : 환경 변수를 설정합니다.
                             해당 환경 변수 값을 Dockerfile 내부에서 $환경변수, ${환경변수} 형식으로 사용할 수 있습니다.
    (7) EXPOSE <포트> : 컨테이너를 만들 때 열어 줄 포트 번호를 지정합니다.
    (8) WORKDIR <경로> : 컨테이너에 들어가면 보이는 기본 경로입니다. (docker exec)
    (9) ENTRYPOINT ["커맨드", "인자", ...] : 컨테이너를 실행할 때 자동으로 실행하는 명령어를 작성합니다.
    (10) CMD ["커맨드", "인자", ...] : 컨테이너를 실행할 때 자동으로 실행하는 명령어를 작성합니다. ENTRYPOINT가 존재하면 주로 CMD에는 "인자"를 작성합니다.
    (11) COPY <src> <desc> : 호스트 파일 또는 디렉터리(src)의 내용을 이미지 내부(desc)로 복사하는 명령어입니다.
    (12) ADD <src> <desc> : COPY 명령어와 비슷합니다. URL을 제시(src)해서 외부 파일을 복사할 수 있고, 호스트 파일이 압축 파일(tar)인 경우 자동으로 압축을 풀어줍니다.



(실습1) Dockerfile1 (mysql:8.0 이미지로 mysql-image:8.0 이미지 만들기)
1. 홈 디렉터리에 Dockerfile1 만들기
$ vi Dockerfile1
-----
# MySQL 이미지 기반으로 새로운 이미지 생성
FROM mysql:8.0
# MySQL 환경변수 설정
ENV MYSQL_ROOT_PASSWORD=root
ENV MYSQL_DATABASE=db_myapp
ENV MYSQL_USER=greenit
ENV MYSQL_PASSWORD=greenit
# 컨테이너 포트 설정
EXPOSE 3306
-----
2. 도커파일을 이용한 이미지 빌드
$ docker build -t mysql-image:8.0 -f Dockerfile1 .
3. 컨테이너 실행
$ docker run -d --name mysql-container -p 3306:3306 mysql-image:8.0



(실습2) Dockerfile2 (ubuntu:22.04 이미지로 openjdk11과 tomcat9.0이 설치된 ubuntu-image:22.04 이미지 만들기)
1. 홈 디렉터리에 Dockerfile2 만들기
$ vi Dockerfile2
-----
# 베이스 이미지
FROM ubuntu:22.04
# 인자
ARG VERSION
# 이미지 정보
LABEL maintainer="mgt<min@gmail.com>" title="Ubuntu On Jdk And Tomcat" version=$VERSION
# 패키지 관리도구 apt 업데이트
RUN apt update
# openjdk-11-jdk 패키지 설치
RUN apt install -y openjdk-11-jdk
# wget 패키지 설치
RUN apt install -y wget
# 함께 설치 : RUN apt install -y openjdk-11-jdk wget
# tomcat 9.0 다운로드 (/home/tomcat 에 다운로드하기)
RUN wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.98/bin/apache-tomcat-9.0.98.tar.gz -P /home/tomcat
# 압축 풀기  (/home/tomcat 에 압축풀기)
RUN tar -xzvf /home/tomcat/apache-tomcat-9.0.98.tar.gz -C /home/tomcat
# openjdk-11-jdk 환경 변수 설정
ENV JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
# tomcat 포트 열기
EXPOSE 8080
# 작업 디렉터리 설정 (docker exec -it container-name bash 명령 시 작업 디렉터리가 열림)
WORKDIR /home/tomcat/apache-tomcat-9.0.98
# 실행할 명령어
CMD ["/home/tomcat/apache-tomcat-9.0.98/bin/catalina.sh", "run"]
-----
2. 도커파일을 이용한 이미지 빌드 및 확인
$ docker build -t ubuntu-image:22.04 -f Dockerfile2 --build-arg VERSION=1.0 .
$ docker images
3. 컨테이너 실행
$ docker run -d --name ubuntu-container -p 8080:8080 ubuntu-image:22.04
4. 컨테이너 실행 확인 (COMMAND에서 도커파일 마지막에 등록한 CMD 확인 가능)
$ docker ps --no-trunc
5. 컨테이너 내부 들어가기 (WORKDIR로 설정한 디렉터리가 기본 위치로 열림, 톰캣 실행 중이므로 war 배포 가능 상태임)
$ docker exec -it ubuntu-container bash
/home/tomcat/apache-tomcat-9.0.98# 



(실습3) Dockerfile3 (mysql:8.0 이미지로 data.sql 스크립트 파일을 다운로드 받아 실행한 <계정명>/mysql-image:8.0 이미지 만들기)
1. 홈 디렉터리에 Dockerfile3 만들기
$ vi Dockerfile3
-----
# 베이스 이미지 : 우분투(Debian 계열) 기반의 mysql:8.0
FROM mysql:8.0-debian
# 인자 설정
ARG ROOT_PASSWORD
ARG USER_PASSWORD
ARG WORK_DIR=/home/mysql
# 환경 변수 설정
ENV MYSQL_ROOT_PASSWORD=$ROOT_PASSWORD
ENV MYSQL_DATABASE=db_myapp
ENV MYSQL_USER=greenit
ENV MYSQL_PASSWORD=$USER_PASSWORD
ENV TZ=Asia/Seoul
# mysql 포트 열기
EXPOSE 3306
# 패키지 관리자 업데이트
RUN apt update
# wget, unzip 패키지 설치
RUN apt install -y wget unzip
# /home/mysql 디렉터리에 스크립트 압축 파일 내려 받기
RUN wget --no-check-certificate https://download.blog.naver.com/open/f267ee5a467978cce3066654658af98f217c80db/HvuZCjGCkiI7uI7SM9B1SzMtOVTTrF59QdfDNKvKOSwfa8pH33KpF8-52tTUANnweydtqlKYK0ohQnTw4aCPNQ/data.zip -P $WORK_DIR
# 작업 디렉터리 설정
WORKDIR $WORK_DIR
# 다운로드 받은 스크립트 압축 파일에 권한 주기
RUN chmod 777 $WORK_DIR/data.zip
# 압축 풀기 (작업 디렉터리 아래에 data.sql 파일이 생성됨)
RUN unzip $WORK_DIR/data.zip
# /docker-entrypoint-initdb.d : 컨테이너가 실행될 때 불러올 스크립트 파일이 위치하는 디렉터리
# /home/mgt 디렉터리에 init-db.sh 스크립트 파일을 만들고 /docker-entrypoint-initdb.d 디렉터리에 복사
# init-db.sh 파일이 /home/mysql/data.sql 파일을 실행하는 셸 스크립트 코드를 가짐
# COPY <host경로> <container경로>
# host경로를 /home/mgt/init-db.sh 작성하면 경로 인식 문제가 발생하여 파일명만 작성
COPY init-db.sh /docker-entrypoint-initdb.d
# 실행할 명령어
CMD ["mysqld"]
-----
2. 홈 디렉터리에 init-db.sh 파일 만들기
$ vi init-db.sh
-----
# 컨테이너 내부의 /usr/bin/mysql 명령어 실행
# root 계정의 비밀번호 전달
# 데이터베이스 db_myapp에/home/mysql/data.sql 스크립트 파일 실행하기
/usr/bin/mysql -u root --password=root db_myapp < /home/mysql/data.sql
-----
3. 도커파일과 init-db.sh 파일을 이용하여 도커 이미지 빌드 및 확인 (향후 도커허브에 이미지 업로드를 고려하여 이미지 이름 앞에 계정명 추가, 레지스트리명인 docker.io는 생략 가능)
$ docker image build -t docker.io/minkt78/mysql-image:8.0 --build-arg ROOT_PASSWORD=root --build-arg USER_PASSWORD=greenit -f Dockerfile3 .
$ docker images
4. 호스트 디렉터리(~/mysql)와 컨테이너 디렉터리(/etc/mysql/conf.d)-(my.cnf 파일로 utf8mb4 환경 설정하는 디렉터리) 마운트 하기(마운트 바인딩 이용)
호스트 디렉터리를 컨테이너 디렉터리와 동일한 소유자:그룹으로 변경해야 연결이 가능함.
$ mkdir ~/mysql
$ sudo chown root ~/mysql
$ sudo chgrp root ~/mysql
5. 테이블 데이터 백업을 위한 도커 볼륨 생성
$ docker volume create mysql-vol
6. 컨테이너 실행 및 확인
$ docker run -d --name mysql-container -p 3306:3306 -v mysql-vol:/var/lib/mysql -v ~/mysql:/etc/mysql/conf.d --restart=always minkt78/mysql-image:8.0
$ docker ps
7. 호스트 디렉터리(~/mysql)에 my.cnf 파일 만들어서 도커 컨테이너 환경 설정하기
$ sudo vi ~/mysql/my.cnf
-----
[client]
default-character-set = utf8mb4
[mysql]
default-character-set = utf8mb4
[mysqldump]
default-character-set = utf8mb4
[mysqld]
init_connect = 'SET collation_connection = utf8_general_ci'
init_connect = 'SET NAMES utf8'
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci
skip-character-set-client-handshake
-----
8. 도커 컨테이너로 들어가기 (WORKDIR 확인 가능, status로 my.cnf 파일 적용 유무 확인, greenit 계정 접속 가능 여부 확인)
$ docker exec -it mysql-container bash
/home/mysql# mysql -u root -p
Enter password: root
mysql> status
...
Server characterset:    utf8mb4
Db     characterset:    utf8mb4
Client characterset:    utf8mb4
Conn.  characterset:    utf8mb4
...
mysql> GRANT ALL PRIVILEGES ON *.* TO 'greenit'@'%';
mysql> exit
/home/mysql# mysql -u greenit -p
mysql> USE db_myapp;
mysql> DESC tbl_user;



(실습4) (openjdk:11 이미지로 스프링 MVC 프로젝트를 빌드하고, tomcat:9 이미지로 배포하는 <계정명>/myapp-image:1.0 이미지 만들기)
1. git 설치
$ sudo apt install -y git
2. 호스트에 github에 있는 스프링 MVC 프로젝트 복제하기
$ git clone https://github.com/teacher-min/myapp.git
3. 스프링 MVC 프로젝트로 이동
$ cd myapp
4. Dockerfile4 만들기
$ vi Dockerfile4
-----
# 베이스 이미지 (첫 번째 컨테이너에 별명 base1 지정)
FROM openjdk:11 as base1
# 작업 디렉터리
WORKDIR /
# 호스트의 myapp 프로젝트 -> 컨테이너에 복사
# COPY <host> <container>
# 첫 번째 . 은 현재 디렉터리 즉 스프링 MVC 프로젝트 디렉터리를 의미함
# 두 번째 . 은 컨테이너 내부의 WORKDIR 즉 루트 디렉터리를 의미함
COPY . .
# 패키지 관리 도구 업데이트
RUN apt update
# maven 설치
RUN apt install -y maven
# 빌드
RUN mvn clean package
# 베이스 이미지
FROM tomcat:9
# 작업 디렉터리
WORKDIR webapps
# 8080 포트 열기
EXPOSE 8080
# 빌드 결과 배포하기
# 빌드 결과는 openjdk:11 베이스 이미지를 이용해 생성한 컨테이너에 존재함
# 다른 베이스 이미지의 데이터를 가져올 때는 as 와 --from 옵션을 사용함
COPY --from=base1 /target/*.war .
-----
5. 도커 이미지 빌드 및 확인
$ docker image build -t minkt78/myapp-image:1.0 -f Dockerfile4 .
$ docker images
6. 도커 컨테이너 실행 및 확인
$ docker run -d --name myapp-container --restart=always -p 8080:8080 minkt78/myapp-image:1.0
$ docker ps
7. 배포 확인
http://192.168.56.1:8080/myapp